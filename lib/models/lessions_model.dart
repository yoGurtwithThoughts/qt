class Lessions {
  final String lessionName;
  final String lessionText;
  // List<String> lessionText = [];
  final String detLessionText;
  final String detLessionName;
  final String description1;
  final String description2;
  final String description3;
  final String description4;
  final String detLessionText1;
  final String detLessionText2;
  final String detLessionText3;
  final String detLessionText4;

  Lessions({this.detLessionText1 = '', this.detLessionText2 = '', this.detLessionText3 = '', this.detLessionText4='', this.lessionName='',  this.lessionText='', this.detLessionText='',  this.detLessionName='',  this.description1='',  this.description2='',  this.description3='',  this.description4=''});

}

final List<Lessions> lessionData = [
    Lessions(lessionName: 'Раздел 1. Введение.', lessionText: 'description1', description1: ' Что такое QT?', description2: ' Установка фреймворка QT и QtCreator.', description3: ' Создание проекта в QtCreator.', description4: ' Конфигурация проекта и файл .pro',
 detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
),
    Lessions(lessionName: 'Раздел 2. Виджеты.', lessionText: '13', description1: ' Введение в виджеты QT.', description2: ' Первое приложение QT на виджетах', description3: 'Копановка', description4: 'Стек виджетов',
     detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
 ),
  Lessions(lessionName: 'Раздел 3. QML и Qick.', lessionText: '14', description1: 'QML и Qt Quick', description2: 'Создание приложения с QML и Qt Quick', description3: 'Компоновка, размеры', description4: 'Позиционирование элемента',
   detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
 ),
  Lessions(lessionName: 'Раздел 4. Компановка', lessionText: 'Контейнеры-позиционеры', description1: 'Контейнеры-позиционеры', description2: 'Grid', description3: 'Контейнеры компоновки QML', description4: 'Установка размеров в контейнерах',
   detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
 ),
  Lessions(lessionName: 'Раздел 5. Основные элементы управления.', lessionText: '15', description1: 'Rectangle', description2: 'Text', description3: 'Repeater', description4: 'Image и изображения',
   detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
),
  Lessions(lessionName: 'Раздел 6. Интеграция QML с C++.', lessionText: '123123123', description1: 'Интеграция QML с C++ и JavaScript', description2: 'Регистрация класса C++ для QML', description3: 'Обращение к элементам QML из кода C++', description4: 'Интеграция QML с JavaScript',
   detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
),
  Lessions(lessionName: 'Раздел 7. Сигналы, слоты и свойства.', lessionText: '123123123', description1: 'Сигналы, слоты и свойства', description2: 'Определение сигналов и слотов', description3: 'Сигналы и слоты в виджетах', description4: 'Сигналы в QML',
   detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
),
  Lessions(lessionName: 'Раздел 8. Модели в виджетах.', lessionText: '123123123', description1: 'Введение в архитектуру View/Model', description2: 'Модель QStringListModel', description3: 'Модель QStandardItemModel', description4: 'Индексы модели',
   detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
),
  Lessions(lessionName: 'Раздел 9. Модели в QML.', lessionText: '123123123', description1: 'Модели и представления в QML', description2: 'Классы C++ в виде моделей для QML', description3: 'ListView', description4: 'TableModel и TableView',
   detLessionText1: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.',
 detLessionText2: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.',
 detLessionText3: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:',
 detLessionText4: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}',
),
];

// final List<Lessions> detLessionData =[
// Lessions(detLessionName: 'Что такое Qt', detLessionText: 'Qt представляет кроссплатформенный фреймворк для создания графических приложений для десктопа, мобильных и встроенных устройств. Он предоставляет разработчикам отличный набор инструментов для проектирования и создания отличных приложений, не беспокоясь о зависимости от платформы. С помощью Qt разработчики могут легко создавать высокопроизводительные масштабируемые приложения с гибким пользовательским интерфейсом. Цель фреймворка Qt - предоставить единый графический интерфейс пользователя (GUI) с единообразным внешним видом и функциональностью на разных платформах. А набор поддерживаемых фреймворком платформ довольно широк - это Windows, Linux, macOS, VxWorks, QNX, Android, iOS и ряд других. Более того он также поддерживает несколько микроконтроллеров (например, от таких компаний как NXP, Renesas и STMicroelectronics), которые вообще не используют операционную систему (так называемый bare metall) или работают на FreeRTOS. И Qt удается достичь подобной цели, предоставляя среду для однократного написания кода и обеспечения его работы на других платформах с минимальными изменениями или без них. Разработка Qt началась 1991 года в стенах компании Trolltech. 20 мая 1995 года была выпущена первая версия для публичного использования. На сегодняшний день фреймворк развивает одноименная компания - Qt. Текущая версия - Qt 6, которая вышла в декабре 2020 года. Однако также постоянно выходят подверсии, привнося в фреймворк значительные изменения и улучшения. Стоит отметить, что платформа и инструменты Qt имеют двойную лицензию: открытую и коммерческую, но при этом развивается как проект с открытым исходным кодом. При необходимости мы мы можем взять исходный код фреймворка и саи его скомпилировать. Официальный репозиторий проект доступен по адресу https://code.qt.io/cgit/qt/qtbase.git/. Также есть официальное зеркало на github: https://github.com/qt Qt использует модульный подход для группировки связанных функций. Основу Qt на всех платформах составляют модули Qt Essentials. Эти модули являются общими и применяются в большинстве приложений на Qt. К примеру это такие модули как Qt Core, Qt GUI, Qt QML, Qt Widgets и т.д. Основные модули доступны для использования с открытым исходным кодом. И также есть специальные дополнительные модули, которые предоставляют определенные функции и имеют определенные лицензионные обязательства, например, Qt 3D, Qt Bluetooth, Qt Charts, Qt Data Visualization и другие. Помимо этого, существуют дополнительные модули, такие как Qt Automotive Suite, Qt for Device Creation и Qt для MCU, среди прочих, доступных по коммерческой лицензии. Стоит отметить, что Qt обладает большим сообществом разработчиков. По данным самой компании Qt фреймворк используют около 1 млн. разработчиков. Насколько эта цифра верна, вопрос спорный, но тем не менее сообщество разработчиков, которые используют Qt, довольно велико. А это, в свою очередь, облегчает разработку, поскольку всегда можно найти множество необходимых материалов, обратиться за советом и т.д. Стоит отметить, что основным языком разработки под Qt является C++, поэтому предполагается, что изучающий Qt владеет хотя бы на базовом уровне языком C++. Хотя в принципе также можно использовать Python в связке с PyQt QtWidgets и QML Для разработки приложений фреймворк Qt предоставляет два подхода. Первый подход состоит в использовании функциональности модуля QtWidgets (в обиходе просто называют "виджеты"). Исторически это более старый подход, который предполагает использование виджетов - специальных классов, который определяют некоторые визуальные компоненты, например, кнопки, текстовые поля и т.д. И с помощью виджетов пользователь может взаимодействовать с приложением. Приложения на основе виджетов будут выглядеть как нативные приложения, что упрощает работу пользователя с приложением. Второй, альтернативный подход предлагает QML. Изначально он был основан на разработке мобильных приложений. Вместе с модулем Qt Quick он позволяет взаимодействовать с мобильным устройством с помощью таких действий, как касания, перетаскивание, анимация, состояния, переходы, меню ящиков и т. д. При этом данный подход также применяется не только для мобильных устройств, но и для других платформ, например, для десткопных приложений.', lessionText: '', ),
// Lessions(detLessionName: 'Установка фреймворка Qt и Qt Creator', detLessionText: 'Для программирования с помощью фреймворка Qt нам естественно надо установить сам фреймворк Qt. И также установим среду разработки QtCreator. Устанавливать QtCreator в принципе необязательно, можно обоитись и без среды разработки. Однако данная среда несколько упрощает создание приложений под Qt, что может быть особенно актуально для начинающих. Сразу стоит сказать о предварительных требованиях. Прежде всего в операционной системе должен быть установлен компилятор C++. Например, на Windows это может быть компилятор C++, который поставляется с Visual Studio (установить можно через установщик Visual Studio). В качестве альтернативы можно взять компилятор GCC, например, в виде реализации от MSYS2. На MacOS следует установить XCode, а на Linux лучше доустановить компилятор Clang. Поскольку для сборки проекта может потребоваться CMake, то также рекомендуется также установить данную утилиту. Это можно сделать, загрузив установочный пакет с официального сайта https://cmake.org/download/ (доступны установщики для всех распространенных операционных систем). Либо это можно сделать через пакетный менеджер. Для установки Qt и Qt Creator можно использовать разные способы: использование одного из менеджеров пакетов, установка вручную, установка с помощью инсталлятора. Вкратце рассмотрим все эти возможности. Установка через пакетный менеджер Самый простой способ установки Qt представляет использование пакетных менеджеров. Многие операционные системы поддерживают различные пакетные менеджеры, которые могут предоставлять специальные пакеты Qt и Qt Creator. Данный способ прост - надо всего лишь ввести в консоли несколько команд. Однако минусом данного способа является то, что часто пакеты в репозиториях пакетных менеджеров не самые актуальные и немного отстают от официального релиза. Кроме того, подобные пакеты могут иметь зависимости от других пакетов, которые также потребуется установить. Третий минус - часто подобные пакеты собираются третьими лицами, а не самой компанией Qt. Установка на MacOS Предварительным условием работы на MacOS является установка XCode. Для установки Qt и Qt Creator на MacOS применяется пакетный менеджер Homebrew. Так, для установки Qt6 надо выполнить в консоли команду brew install qt Для сборки приложения может использоваться CMake, поэтому также следует установить соответстветствующий пакет: brew install cmake А для установки Qt Creator применяется команда brew install --cask qt-creator Стоит отметить, что в реальности эта команда скачивает программу с адреса "https://download.qt.io/official_releases/qtcreator/12.0/12.0.0/", соответственно, если доступа к адресу нет, то соответственно, не удастся загрузить и саму программу. На этот счет чуть ниже в статье приведен список альтернативных зеркал для загрузки. Установка на Linux на примере Ubuntu Для установки Qt на Ubuntu/Debian применяется следующая команда sudo apt install qt6-base-dev А для установки Qt Creator применяется команда sudo apt install qtcreator Для запуска применяется команда qtcreator Также надо установить пакет CMake, который может пригодится при построении проекта sudo apt install cmake и пакет Clang sudo apt install clang Установка на Windows На Windows можно использовать один из пакетных менеджеров.    vcpkg    Например, установка Qt6 через менеджер vcpkg:    vcpkg install qt    Установка только базового пакета    vcpkg install qtbase    MSYS2/Packman    Установка Qt через MSYS с помощью пакетного менеджера packman:    pacman -S mingw-w64-x86_64-qt6    Только базовый пакет    pacman -S mingw-w64-x86_64-qt6-base    Установка Qt Creator    pacman -S mingw-w64-x86_64-qt-creator    chocolatey    Установка Qt6 с Qt Creator через менеджер chocolatey:    choco install -y qt6-base-dev cmake qtcreator    winget    Установка Qt6 через менеджер winget:    winget install --id=miurahr.aqtinstall  -eУстановка через Qt Online Installer Универсальный и рекомендуемый способ установки Qt и Qt Creator представляет использование онлайн-загрузчика. Официальный сайт предоставляет свои установщики для распространенных операционных систем. Главным минусом данного способа является то, что при загрузке могут быть ограничения по географическому признаку, и кроме того, надо иметь учетную запись на официальном сайте QT. Если такой учетной записи не имеется, то для регистрации аккаунта можно перейти на страницу https://login.qt.io/register регистрациия на сайте Qt После регистрации загрузим программу установки. Для этого перейдем на страницу https://www.qt.io/download-qt-installer. При переходе на страницу автоматически начнется загрузка установщика. Сайт автоматически определяет текущую операционную систему и отдает установщик, соответствующей этой системе. После загрузки запустим программу установки (если операционная система Windows, то лучше запустить от имени администратора): Программа установки Qt Вначале программа установки предложит осуществить вход с логином и паролем от учетной записи QT, которая выше была зарегистрирована. И в поля ввода введем логин-электронный адрес и пароль и нажмем на кнопку "Далее". Затем на следующем шаге отметим пару флажков и нажмем на кнопку "Далее": Обязательства по использованию Qt в качестве открытого ПО На следующем шаге снова нажмем на кнопку "Далее": установка Qt Затем нам будет предложено выбрать, надо ли отправлять отчет : не надо отправлять отчет в Qt, он им не нужен Далее надо будет указать каталог для установки (можно оставить каталог по умолчанию), а также тип установки: Installation in Qt В качестве типа установки можно указать "Выборочная установка", тогда на следующем шаге необходимо будет указать устанавливаемые компоненты: Выбор компонентов для установки Qt В данном случае выберем последнюю на данный момент версию Qt (которая не является Preview). В моем случае это версия Qt 6.6.1. В зависимости от текущей операционной системы набор компонентов может отличаться. Но если программа устанавливается на Windows, то у нас есть два варианта для компилятора С/С++ - MSVC (MSVC 2019 64-bit) и MinGW (MinGW 11.2.0. 64-bit). Можно оставить только один из них, можно выбрать оба. Но один из них обязательно надо включить, если вы собираетесь создавать приложения под 64-разрядную Windows. Но следует отметить, что в операционной системе должен быть установлен соответствующий компилятор C++. Так, при выборе опции MSVC 2019 64-bit должен быть установлен компилятор C++ с Visual Studio, а при выборе опции MinGW 11.2.0. 64-bit - компилятор GCC/MinGW (например, от MSYS2). Остальные компоненты можно устанавливать при необходимости. При установки следует учитывать свободное место на жестком диске, так как некоторые компоненты занимают довольно многом места. Затем надо принять лицензионное соглашение CMake и настроить ярлык для меню Пуск. И далее нажмем на кнопку "Установить": Начало установки Qt Creator Загрузка офлайн-сборок с официального сайта Также фреймворк Qt и все сопровождающие файлы можно загрузить с официального сайта с репозитория https://download.qt.io/online/qtsdkrepository/. В частности, для версии Qt 6.6.1 пакеты для создания десктопного приложения под Windows, которые используют компилятор C++ из Visual Studio, доступны по адресу https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/qt6_661/qt.qt6.661.win64_msvc2019_64/ в виде пакетов с названиями Эти архивы помещаем в один каталог, например, c:\qt, и распаковывываем по одному и тому же пути. Ручная установка пакетов Qt В итоге содержимое архивов объединяется и располагается в одних и тех же папках. Затем данное расположение цепляется в Qt Creator при создании проектов.', lessionText: ''),
// Lessions(detLessionName: 'Создание проекта в Qt Creator', detLessionText: 'Среда разработки Qt Creator не является неотъемлимым компонентом для разработки приложений с помощью фреймворка Qt, тем не менее он упрощает многие вещи, прежде всего конфигурацию и настройку построения приложения. Кроме того, Qt Creator предоставляет унифицированный интерфейс для основных операционных систем. И в дальнейшем я буду ориентироваться прежде всего на Qrt Creator. Создадим первый проект. Для этого откроем Qt Creator и на стартовом экране выберем Create Project..., либо перейдем к пункту меню : Создание проекта в Qt Creator И нам откроется окно выбора типа проекта: Выбор типа проекта в Qt Creator Выберем здесь тип шаблона Qt Widgets Application. Данный шаблон предоставляет базовый функционал для создания графического приложения. На следующем шаге надо указать имя проекта и его расположение. Пусть проект будет называться HelloApp: Настройка проекта в Qt Creator Далее надо выбрать систему сборки. В данном случае у нас есть выбор между qmake, CMake и Qbs. У каждого из них есть свои особенности, но в данном случае не принципиально, какую именно использовать. Поэтому возьмем первую из них qmake, которая представляет собственную систему сборки Qt. Установка системы сборки проекта в Qt Creator На следующем шаге нам отобразится окно с настройкой создаваемых файлов. Установка класса приложения проекта в Qt Creator Оставим все эти настройки по умолчанию. Но для общего понимания вкратце пробежимся по ним:     Class name: имя создаваемого класса приложения Base class: базовый класс, от которого будет наследоваться класс приложения. По умолчанию у нас есть выбор из QMainWindow, QWidget и QDialog. Если надо, чтобы было полноценное окно приложения с меню, панелями статуса, инструментов, то выбирается QMainWindow. Header file: заголовочный файл для описания функция класса Source file: файл с реализацией функционала класса Generate form: указывает, будет ли генерироваться файл формы Form file: имя файла формы, который будет генерироваться При желании эти опции можно поизменять, но для первого приложения оставим все эти опции по умолчанию. Qt Creator поставляется с инструментом Qt Linguist, который позволяет переводить приложение на разные языки. И на следующем шаге предлагается указать язык приложения. Установка языка приложения проекта в Qt Creator На данный момент для нас это не актуально, поэтому ничего не будем вводить и пропустим этот шаг На следующем шаге будет предложено выбрать комплект инструментов (kit) для сборки и запуска проекта. И в данном случае необходимо выбрать хотя бы один комплект. Например, в данном случае мы будет создавать настольное графическое приложение. Поэтому выберем пункт, название которого начинается с "Desktop". Например, для создания графического приложения под Windows я выбираю пункт Desktop (x86-windows-msvc2022-pe-64bit) Установка связи между комплектом и версией фреймворка Qt в Qt Creator В зависимости от операционной системы набор комплектов может отличаться. Обычно комплекты определяются автоматически. Однако может быть ситуация, когда в списке указаны комплекты, но они не активны, не доступны для выбора и отображаются серым цветом. В этом случае, возможно, имеются проблемы с настройкой комплекта, как например, в следующем случае: Настройка комплекта проекта в Qt Creator В этом случае надо установить связь между нужным комплектом и установленной версией Qt. Как это сделать расказывается далее. После выбора комплекта на финальном окне можно будет указать настройки контроля версий: Настройка комплекта проекта в Qt Creator Оставим все поля по умолчанию и нажмем на кнопку "Finish" для создания проекта. Установка связи между Qt и Qt Creator Как правило, Qt Creator может автоматически подхватить установленный Qt, а также ряд дополнительных инструментов типа CMake, компиляторов для C/C++ и других. Однако если Qt Creator устанавливается отдельно от Qt (вручную или с помощью пакетного менеджера), то может потребоваться вручную установить связь между комплектом и версией Qt. Для этого в Qt Creator перейдем к пункту меню Tools -> External - > Configure... (или к пункту Edit-> Preferences): Настройка связи с Qt в Qt Creator В открывшемся окне настроек перейдем к вкладке Qt Versions. Тут должны быть указаны используемые версии Qt. Однако если среда разработки не может автоматически подхватить фреймворк, то в окне может быть пусто: Установка связи с Qt в Qt Creator Если здесь пусто, нажмем на кнопку "Add" и в открывшемся окне укажем путь к утилите qmake6 (qmake6.exe на windows). Например, в моем случае это путь "C:\Qt\6.6.1\msvc2019_64\bin". И затем нажмем на кнопку "Apply". Выше приведен пример с Windows, но те же самое характерно и для Linux/MacOS, только конкретные пути к qmake будут отличаться. Далее на вкладке Kits находим выбираем нужный комплект и через поле Qt Version устанавливаем для него версию ферймворка Qt Установка связи между комплектом и версией фреймворка Qt в Qt Creator Структура проекта Итак, в результате Qt Creator создает проект следующего вида : Первый проект в Qt Creator Слева отобразится дерево проекта, а справа будет открыт файл main.cpp. По умолчанию стартовый проект состоит из следующих файлов:     HelloApp.pro: файл конфигурации проекта    mainwindow.h: заголовочный файл с описанием класса MainWindow, который представляет графическое окно     mainwindow.cpp: непосредственно сам функционал класса MainWindow     main.cpp: файл с функцией main, в которой и происходит запуск приложения Qt и его окна в виде объекта класса MainWindow     mainwindow.ui: xml-файл, который описывает интерфейс окна Запуск проекта Проект по умолчанию уже можно запустить. Для запуска проекта нажмем в Qt Creator в левом нижнем углу на зеленую стрелочку. Стоит отметить, что при компиляции мы можем проверить вывод окна "Compile Output" - здесь могут отображать различная важная информация, например, информация о возникших ошибках: Запуск проекта в Qt Creator И при запуске проекта нам отобразится пустое окно приложения:', lessionText: ''),
// Lessions(detLessionName: 'Конфигурация проекта и файл .pro', detLessionText: 'При создании в Qt Creator проекта, который использует систему построения qmake, среда разработки автоматически создает файл конфигурации с расширением .pro.Файл конфигурации проекта .pro для системы построения qmake в Qt CreatorФайл .pro содержит всю информацию, необходимую qmake для создания приложения, библиотеки или плагина. В частности, файл проекта содержит ряд объявлений для указания ресурсов, таких как ссылки на исходные файлы и файлы заголовков, библиотеки, необходимые проекту и т.д.Файл проекта Qt имеет несколько разделов и использует определенные предопределенные переменные qmake. Например, типичное содержание .pro-файла:123456789101112131415161718192021222324QT += core guigreaterThan(QT_MAJOR_VERSION, 4): QT += widgetsCONFIG += c++17# You can make your code fail to compile if it uses deprecated APIs.# In order to do so, uncomment the following line.#DEFINES += QT_DISABLE_DEPRECATED_BEFORE=0x060000    # disables all the APIs deprecated before Qt 6.0.0SOURCES += \main.cpp \mainwindow.cppHEADERS += \mainwindow.hFORMS += \mainwindow.ui# Default rules for deployment.qnx: target.path = /tmp/{TARGET}/binelse: unix:!android: target.path = /opt/{TARGET}/bin!isEmpty(target.path): INSTALLS += targetНаиболее часто используемые в файле переменные:QT: список модулей Qt, которые применяются в проектеCONFIG: общие конфигурационные настройки проектеDESTDIR: каталог, в который будут помещаться скомпилированные бинарные файлыFORMS: список файлов с определением пользовательского интерфейса (UI-файлов), которые обрабатываются UI-компилятором (uic)HEADERS: список заголовочных файлов (.h), применяемых при построении проектаRESOURCES: список файлов ресурсов (.qrc), которые включены в проектSOURCES: список файлов с исходным кодом (.cpp), используемых при построении проектаTEMPLATE: определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин.Чтобы добавить дополнительные модули, после выражения QT += добавляется имя модуля1QT += core gui sqlДобавляемые модули отделяются друг от друга пробелом. Так, в данном случае добавляется три модуля.Также перед добавление модуля можно указать условие, когда добавлять конкретный модуль в проект, например:1greaterThan(QT_MAJOR_VERSION, 4): QT += widgetsТакже можно добавить в проект настройки конфигурации с помощью переменной CONFIG. Например, если надо указать, что при компиляции проекта применяется стандарт C++17, то в файл .pro добавляется следующая строка:1CONFIG += c++17Аналогично для применения стандарта C++20 применяется выражение1CONFIG += c++20Переменная TEMPLATE определяет тип проекта - будет ли при сборке проекта создавать исполняемое приложение, библиотека или плагин. Существуют различные переменные, которые позволяют определить тип файла, который будет генерировать qmake. Основные из них:app: используется для создания приложения.lib: используется для создания библиотеки.Например, компиляция проекта в качестве библиотеки:1TEMPLATE = libЧтобы определить иконку приложения на Windows, можно добавить в файл .pro следующую строку:1RC_ICONS = myapplication.icoДля установки иконки для macOS добавляется следующая строка:1ICON = myapplication.icnsДля Linux способ добавления зависит от конкретного дистрибутива.При определении файла в него можно добавить комментарии, которые должны начинаться с символа решетки (#). При сборке проекта система сборки проигнорирует соответствующие строки.Платформозависимые настройкиФайл .pro позволяет определить разные конфигурации для разных платформ, поскольку не каждая конфигурация подходит для всех случаев использования. Например, если надо включить разные пути заголовков для разных операционных систем, то можно добавить в файл .pro следующие строки кода:12win32: INCLUDEPATH += "C:/somefolder/windows_headers"unix:INCLUDEPATH += "/home/user/linux_headers"В данном фрагменте кода параметр INCLUDEPATH указывает на добавляемые пути заголовочных файлов. Опция win32 задает настройки для Windows, а unix - для Linux.Также можно определить блок конфигураций для определенной системы, например, добавим для Windows дополнительные исходные файлы:123win32 {SOURCES += windows_code.cpp}', lessionText: ''),
// Lessions(detLessionName: 'Введение в виджеты Qt', detLessionText: 'Исторически первый подход к построению графического интерфейса на Qt представляли виджет. Виджеты представляют различные элементы пользовательского интерфейса, например, кнопки, текстовые поля и прочие компоненты, из которых состоит окно приложения. Виджет позволяет обрабатывать различные пользовательские события, например, события мыши и клавиатуры. И таким образом пользователь может взаимодействовать с приложением. Базовый встороенный набор виджетов Qt расположен в модуле QtWidgets.При этом Qt широко использует концепцию наследования. Все виджеты наследуются от встроенного типа QWidget. Это базовый виджет и базовый класс всех виджетов пользовательского интерфейса. Он содержит большинство свойств, необходимых для описания виджета, а также такие свойства позиционирования виджета, цвет и т. д. Иерархию виджетов Qt еще можно представить следующим образом:Иерархия виджетов в QtНекоторые базовые виджеты:QPushButton: представляет кнопкуQCheckBox: представляет флажок, который может находиться в отмеченном и неотмеченном состоянииQRadioButton: представляет радиокнопку (переключатель)QFrame: представляет фрейм и позволяет группировать виджетыQLabel: используется для отображения текста или изображенияQLineEdit: позволяет пользователю вводить и редактировать однострочный текстQTabWidget: используется для создания вкладок с виджетамиПри этом класс QWidget в свою очередь наследуется от базового типа QObject. Любой объект, который наследуется от QObject, позволяет установить связь между виджетом-контейнером и вложенными или дочерними виджетами. То есть один виджет (например, графическое окно) может содержать другие виджеты (кнопки, текстовые поля и т.д.). Эта взаимосвязь упрощает многие вещи, в частности:Дочерние виджеты в Qwidget автоматически появляются внутри родительского виджета.Когда виджет-контейнер уничтожается, все его дочерние элементы также уничтожаются. Это позволяет избежать утечек памяти.Все дочерние элементы определенного виджета-контейнера можно получить с помощью методов findChild() и findChildren().', lessionText: ''),
// Lessions(detLessionName: 'Первое приложение Qt на виджетах', detLessionText: 'Хотя Qt Creator предоставляет ряд встроенных шаблонов, которые упрощают создание приложения и содержат некоторую базовую функциональность, тем не менее в реальности мы можем определить простейший консольный проект Qt и добавить в него весь функционал с нуля. Такой проект может служить отправной точкой, если нам нам не надо ничего лишнего. Например, при создании нового проекта в Qt Creator выберем шаблон Qt Console Application:Создание консольного приложения в QtВ качестве системы построения выберем "qmake":Установка системы построения для проекта QtВ итоге у нас будет создан проект с двумя файлами:Проект консольного приложения в Qt CreatorКак и в любом проекте, файл с расширением .pro (в моем случае "HelloQtApp.pro") представляет файл конфигурации проекта, а сам код программы расположен в файле main.cpp12345678#include <QCoreApplication>int main(int argc, char *argv[]){QCoreApplication a(argc, argv);return a.exec();}Фактически приложение Qt представляет собой класс QCoreApplication. По умолчанию определяется объект этого класса - переменная a, и при создании этого объекта в его конструктор передаются аргументы командной строки. Для запуска приложения у объекта QCoreApplication вызывается метод exec(). После вызова этого метода приложение входит в цикл обработки событий. Завершается приложение, когда пользователь завершит его, например, нажатием на крестик или иным образом.Если мы запустим данный проект, то окно Application Output сообщит нам, что приложение успешно запущено, тем не менее мы ничего не увидим:Запуск консольного приложения в Qt CreatorВ реальности это было бы консольное приложение, но а данном случае окно Application Output выполняет роль консоли. Нажмем на красный квадратик для завершения приложения.Причем несмотря на то, что здесь запускается приложение Qt, это все равно приложение на C++, в котором мы можем использовать функционал данного языка. Например, банально выведем строку на консоль, изменив код в main.cpp следующим образом:12345678910#include <QCoreApplication>#include <iostream>int main(int argc, char *argv[]){QCoreApplication a(argc, argv);std::cout << "Hello METANIT.COM!" << std::endl;return a.exec();}При запуске окно Application Output мы увидим выводимую строку:Запуск кода на C++ в консольном приложении в Qt CreatorНо в данном случае нас естественно интересует, как мы можем сделать из него графическое приложение. Для этого вместо класса QCoreApplication используем класс QApplication. В реальности QApplication наследуется от QGuiApplication, а тот, в свою очередь, от QCoreApplication. Поэтому мы можем использовать класс QApplication вместо QCoreApplication.QApplication позволяет нам добавить виджеты в приложение. Например, добавим виджет типа QWidget. И для этого изменим файл main.cpp следующим образом:12345678910#include <QApplication>#include <QWidget>int main(int argc, char *argv[]){QApplication app(argc, argv); // создаем объект приложенияQWidget widget;               // создаем виджетwidget.show();                // отображаем виджетreturn app.exec();           // запуск приложения}Класс QWidget не определяет какого-то конкретного элемента управления типа кнопки или текстового поля, этот виджет можно отождествлять просто с некоторой прямоугольной областью. И чтобы отобразить виджет, у него вызывается метод show().Однако Qt Creator может не определять ни класс QApplication, ни класс QWidget, поскольку эти классы находятся в модуле widgets, который по умолчанию не подключен в проект. Нам надо его подключить. Для этого перейдем к файлу конфигурации проекта - файлу с расширением .pro (в моем случае "HelloQtApp.pro"). По умолчанию он должен выглядеть наподобие следующего:12345678910QT = coreCONFIG += c++17 cmdlineSOURCES += main.cpp# Здесь нам важна первая опция - QT. Она устанавливает используемые в проекте модули. Например, выражение QT = core указывает, что проект будет использовать модуль core. В частности, в этом модуле расположен класс QCoreApplication. Если бы мы не подключили модуль "core", то и класс QCoreApplication мы бы не могли использовать. И поскольку виджеты расположены в модуле widgets, изменим первую строку следующим образом:1QT += widgetsВ данном случае не столь важно, напишем мы QT = widgets или QT += widgets, но если потребуется добавить несколько модулей, то для каждого последующего применяется оператор +=Добавление модулей в проект QtСтоит отметить, что если мы компилируем в консоли, а не в Qt Creator, то при изменениях в файле .pro надо выполнять команды:qmakemakeВ Qt Creator достаточно запустить заново проект, и мы увидим окно наподобие следующего:Первое графическое приложение на QtТо есть мы получаем окно некоторых стандартных размеров с заголовком, который соответствует имени проекта. В реальности, для создания окна приложения вместо QWidget применяются другие виджеты типа QMainWindow, которые позволяют настроить различные аспекты окна. Но теперь добавим в это окно какой-нибудь виджет. И для этого изменим файл main.cpp следующим образом:1234567891011121314151617181920#include <QApplication>#include <QWidget>#include <QLabel>int main(int argc, char *argv[]){QApplication app(argc, argv);QWidget widget;// настраиваем заголовок окнаwidget.setWindowTitle("Qt на METANIT.COM");widget.setMinimumHeight(180);  // высота окнаwidget.setMinimumWidth(300);  // ширина окнаQLabel label{&widget};      // создаем текстовую меткуlabel.setText("Hello METANIT.COM"); // установка текста меткиwidget.show();  // отображаем виджетreturn app.exec();}Здесь добавлено несколько моментов. Прежде всего устанавливаем отображаемое имя, которое будет применяться в качестве заголовка окна:1widget.setWindowTitle("Qt на METANIT.COM");С помощью методов класса Widget устанавливаем размеры виджета-контейнера, который фактически выступает в качестве окна12widget.setMinimumHeight(180);  // высота окнаwidget.setMinimumWidth(300);  // ширина окнаТо есть у нас будет окно с шириной в 300 единиц и высотой в 180 единиц.Далее создаем текстовую метку - она представляет тип QLabel1QLabel label{&widget};В конструкторе класса QLabel (и других виджетов) можно передать указатель на виджет, который представляет контейнер и в который будет добавляться метка. То есть в данном случае метка добавляется в контейнер widget.Затем у метки устанавливается текст:1label.setText("Hello METANIT.COM");Если мы запустим проект, то мы получим следующее окноПервое графическое приложение в Qt CreatorПодобным образом можно добавлять и другие виджеты. Можно добавлять один виджеты в другие, создавать сложные композиции, настраивать свойства, различные аспекты виджетов и прочие.', lessionText: '')
// ];

// final List<Lessions> lessionChapter =[
// Lessions(lessionText: '123123123'),
// Lessions(lessionText: '123123123'),
// Lessions(lessionText: '123123123'),
// Lessions(lessionText: '123123123'),
// Lessions(lessionText: '123123123'),
// ];
// ['*Что такое QT?', '*Установка фреймворка QT и QtCreator.',  '*Установка фреймворка QT и QtCreator.', '*Конфигурация проекта и файл .pro']
// ['*Введение в виджеты QT.', '*Первое приложение QT на виджетах',  '*Копановка', '*Стек виджетов', '*Грид QGridLayout', '*Кнопка QPushButton']
// ['*Что такое QT?', '*Установка фреймворка QT и QtCreator.',  '*Установка фреймворка QT и QtCreator.']
// ['*Что такое QT?', '*Установка фреймворка QT и QtCreator.',  '*Установка фреймворка QT и QtCreator.']
// ['*Что такое QT?', '*Установка фреймворка QT и QtCreator.',  '*Установка фреймворка QT и QtCreator.']